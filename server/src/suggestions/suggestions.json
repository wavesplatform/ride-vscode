{
  "keywords": [
    "let",
    "true",
    "false",
    "if",
    "then",
    "else",
    "case",
    "func"
  ],
  "directives": [
    "{-# STDLIB_VERSION 1 #-}",
    "{-# STDLIB_VERSION 2 #-}",
    "{-# STDLIB_VERSION 3 #-}",
    "{-# STDLIB_VERSION 4 #-}",
    "{-# SCRIPT_TYPE ACCOUNT #-}",
    "{-# SCRIPT_TYPE ASSET #-}",
    "{-# CONTENT_TYPE DAPP #-}",
    "{-# CONTENT_TYPE EXPRESSION #-}"
  ],
  "snippets": [
    {
      "label": "ifelse",
      "insertText": "if (${1:condition}) then $2 else $3",
      "insertTextFormat": 2
    },{
      "label": "match",
      "insertText": "match (${1:tx}) {\n    case t:${2:type} => $0\n    case _ =>\n  }",
      "insertTextFormat": 2
    },{
      "label": "base58",
      "insertText": "base58'$1'",
      "insertTextFormat": 2
    },{
      "label": "base64",
      "insertText": "base64'$1'",
      "insertTextFormat": 2
    },
    {
      "label": "base16",
      "insertText": "base16'$1'",
      "insertTextFormat": 2
    },
    {
      "label": "FOLD",
      "insertText": "FOLD<${1:STEP_MAX}>(${2:LIST}, ${3:ACCUMULATOR}, ${4:FUNCTION})",
      "detail": "FOLD: list : List[A] - list of values; acc : B - accumulator, foldFunc: func(acc:B, value: A) : B - folding function, takes values from list one by one",
      "insertTextFormat": 2
    }
  ]
}
