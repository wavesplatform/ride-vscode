{
    "information_for_contributors": [
        "None"
    ],
    "version": "",
    "name": "Ride",
    "scopeName": "source.ride",
    "patterns": [
        {
            "name": "keyword.ride",
            "match": "\\b(let|strict|if|then|else|ifelse|match|case|base64|base58|base16|func)\\b"
        },
        {
            "name": "entity.name.function.ride",
            "match": "\\b(size|toBytes|toBytes|toBytes|toString|toString|isDefined|throw|throw|-|==|!=|>=|>|getElement|size|-|!|take|drop|takeRight|dropRight|take|drop|dropRight|takeRight|extract|fraction|size|value|valueOrErrorMessage|toInt|toInt|parseInt|parseIntValue|pow|log|toUtf8String|cons|indexOf|indexOf|lastIndexOf|lastIndexOf|split|keccak256|blake2b256|sha256|sigVerify|toBase58String|fromBase58String|toBase64String|fromBase64String|rsaVerify|checkMerkleProof|toBase16String|fromBase16String|transactionHeightById|getInteger|getBoolean|getBinary|getString|addressFromRecipient|getInteger|getBoolean|getBinary|getString|getInteger|getBoolean|getBinary|getString|addressFromString|addressFromPublicKey|getIntegerValue|getBooleanValue|getBinaryValue|getStringValue|getIntegerValue|getBooleanValue|getBinaryValue|getStringValue|getIntegerValue|getBooleanValue|getBinaryValue|getStringValue|addressFromStringValue|assetInfo|blockInfoByHeight|transferTransactionById|toString|assetBalance|wavesBalance)\\b"
        },
        {
            "name": "entity.name.type.ride",
            "match": "\\b(Unit|Int|Boolean|ByteVector|String|Up|HalfDown|Down|HalfUp|HalfEven|Ceiling|Floor|NoAlg|Md5|Sha1|Sha224|Sha256|Sha384|Sha512|Sha3224|Sha3256|Sha3384|Sha3512|Md5|NoAlg|Sha1|Sha224|Sha256|Sha3224|Sha3256|Sha3384|Sha3512|Sha384|Sha512|Address|Alias|Transfer|AssetPair|Order|Transaction|GenesisTransaction|PaymentTransaction|ReissueTransaction|BurnTransaction|MassTransferTransaction|ExchangeTransaction|TransferTransaction|SetAssetScriptTransaction|InvokeScriptTransaction|IssueTransaction|LeaseTransaction|LeaseCancelTransaction|CreateAliasTransaction|SetScriptTransaction|SponsorFeeTransaction|DataTransaction|DataEntry|AttachedPayment|ScriptTransfer|Invocation|Asset|BlockInfo|WriteSet|TransferSet|ScriptResult)\\b"
        },
        {
            "name": "markup.bold.ride entity.name.type.ride",
            "match": "{-#(.*)#-}"
        },
        {
            "name": "markup.bold.ride entity.other.attribute-name.ride",
            "match": "@(Verifier|Callable)"
        },
        {
            "name": "markup.italic.ride entity.name.type.ride",
            "match": "\\b(Address|Alias|Transfer|Order|DataEntry|GenesisTransaction|PaymentTransaction)\\b"
        },
        {
            "include": "#qstring-single"
        },
        {
            "include": "#qstring-double"
        },
        {
            "include": "#boolean"
        },
        {
            "include": "#comments"
        },
        {
            "include": "#numbers"
        }
    ],
    "repository": {
        "qstring-double": {
            "name": "string.quoted.double.ride",
            "begin": "\"",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.ride"
                }
            },
            "end": "(\")|((?:[^\\\\\\n])$)",
            "endCaptures": {
                "1": {
                    "name": "punctuation.definition.string.end.ride"
                },
                "2": {
                    "name": "invalid.illegal.newline.ride"
                }
            }
        },
        "qstring-single": {
            "name": "variable.parameter ",
            "begin": "'",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.ride"
                }
            },
            "end": "(\\')|((?:[^\\\\\\n])$)",
            "endCaptures": {
                "1": {
                    "name": "punctuation.definition.string.end.ride"
                },
                "2": {
                    "name": "invalid.illegal.newline.ride"
                }
            }
        },
        "boolean": {
            "patterns": [
                {
                    "match": "\\b(true|false)\\b",
                    "name": "constant.language.ride"
                }
            ]
        },
        "comments": {
            "patterns": [
                {
                    "name": "comment.line.ride",
                    "begin": "#",
                    "end": "\\n"
                }
            ]
        },
        "numbers": {
            "patterns": [
                {
                    "match": "\\b(?<!\\$)0[0-7]([0-7_]*[0-7])?[Ll]?\\b(?!\\$)",
                    "name": "constant.numeric.octal.ride"
                },
                {
                    "match": "(?x)\n(?<!\\$)\n(\n  \\b[0-9]([0-9_]*[0-9])?\\.\\B(?!\\.)\n  |\n  \\b[0-9]([0-9_]*[0-9])?\\.([Ee][+-]?[0-9]([0-9_]*[0-9])?)[FfDd]?\\b\n  |\n  \\b[0-9]([0-9_]*[0-9])?\\.([Ee][+-]?[0-9]([0-9_]*[0-9])?)?[FfDd]\\b\n  |\n  \\b[0-9]([0-9_]*[0-9])?\\.([0-9]([0-9_]*[0-9])?)([Ee][+-]?[0-9]([0-9_]*[0-9])?)?[FfDd]?\\b\n  |\n  (?<!\\.)\\B\\.[0-9]([0-9_]*[0-9])?([Ee][+-]?[0-9]([0-9_]*[0-9])?)?[FfDd]?\\b\n  |\n  \\b[0-9]([0-9_]*[0-9])?([Ee][+-]?[0-9]([0-9_]*[0-9])?)[FfDd]?\\b\n  |\n  \\b[0-9]([0-9_]*[0-9])?([Ee][+-]?[0-9]([0-9_]*[0-9])?)?[FfDd]\\b\n  |\n  \\b(0|[1-9]([0-9_]*[0-9])?)(?!\\.)[Ll]?\\b\n)\n(?!\\$)",
                    "name": "constant.numeric.decimal.ride"
                }
            ]
        }
    }
}